{"ast":null,"code":"import _regeneratorRuntime from \"/Users/twalke/Desktop/PDQ_CN/client/cabalistic-necromancer/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/twalke/Desktop/PDQ_CN/client/cabalistic-necromancer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/twalke/Desktop/PDQ_CN/client/cabalistic-necromancer/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/twalke/Desktop/PDQ_CN/client/cabalistic-necromancer/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/twalke/Desktop/PDQ_CN/client/cabalistic-necromancer/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/twalke/Desktop/PDQ_CN/client/cabalistic-necromancer/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/twalke/Desktop/PDQ_CN/client/cabalistic-necromancer/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/twalke/Desktop/PDQ_CN/client/cabalistic-necromancer/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/twalke/Desktop/PDQ_CN/client/cabalistic-necromancer/src/DisplayThoughtButton.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport ThoughtData from \"./ThoughtData\";\n\nvar DisplayThoughtButton =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DisplayThoughtButton, _Component);\n\n  function DisplayThoughtButton() {\n    var _this;\n\n    _classCallCheck(this, DisplayThoughtButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DisplayThoughtButton).call(this));\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      isThoughtDisplayed: false,\n      loading: true,\n      errMsg: null\n    };\n    return _this;\n  }\n\n  _createClass(DisplayThoughtButton, [{\n    key: \"handleClick\",\n    value: function handleClick() {\n      this.setState({\n        isThoughtDisplayed: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isThoughtDisplayed = this.state.isThoughtDisplayed;\n      var button;\n      button = React.createElement(\"button\", {\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"Display Thought\");\n\n      if (isThoughtDisplayed) {\n        return React.createElement(\"div\", {\n          className: \"thoughtContainer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        }, React.createElement(Thought, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }), button);\n      } else {\n        return React.createElement(\"div\", {\n          className: \"thoughtContainer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, button);\n      }\n    }\n  }]);\n\n  return DisplayThoughtButton;\n}(Component);\n\nfunction GetThoughts() {\n  return _GetThoughts.apply(this, arguments);\n}\n\nfunction _GetThoughts() {\n  _GetThoughts = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var thoughts;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            thoughts = [];\n            _context.next = 3;\n            return axios.get(\"http://localhost:8080/thought\").then(function (response) {\n              return thoughts = response.data;\n            }).catch(function (err) {\n              return console.log(\"ERROR\");\n            });\n\n          case 3:\n            return _context.abrupt(\"return\", thoughts);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _GetThoughts.apply(this, arguments);\n}\n\nfunction Thought(_x) {\n  return _Thought.apply(this, arguments);\n}\n\nfunction _Thought() {\n  _Thought = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(state) {\n    var thoughts;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return GetThoughts();\n\n          case 2:\n            thoughts = _context2.sent;\n            console.log(thoughts);\n\n            if (!thoughts) {\n              _context2.next = 6;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", React.createElement(ThoughtData, {\n              thoughts: thoughts,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 59\n              },\n              __self: this\n            }));\n\n          case 6:\n            return _context2.abrupt(\"return\", null);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _Thought.apply(this, arguments);\n}\n\nexport default DisplayThoughtButton;","map":{"version":3,"sources":["/Users/twalke/Desktop/PDQ_CN/client/cabalistic-necromancer/src/DisplayThoughtButton.js"],"names":["React","Component","axios","ThoughtData","DisplayThoughtButton","handleClick","bind","state","isThoughtDisplayed","loading","errMsg","setState","button","GetThoughts","thoughts","get","then","response","data","catch","err","console","log","Thought"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,WAAP,MAAwB,eAAxB;;IAEMC,oB;;;;;AACJ,kCAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,uDAAnB;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,kBAAkB,EAAE,KADT;AAEXC,MAAAA,OAAO,EAAE,IAFE;AAGXC,MAAAA,MAAM,EAAE;AAHG,KAAb;AAHY;AAQb;;;;kCAEa;AACZ,WAAKC,QAAL,CAAc;AAACH,QAAAA,kBAAkB,EAAE;AAArB,OAAd;AACD;;;6BAEQ;AACP,UAAMA,kBAAkB,GAAG,KAAKD,KAAL,CAAWC,kBAAtC;AACA,UAAII,MAAJ;AACAA,MAAAA,MAAM,GAAG;AAAQ,QAAA,OAAO,EAAE,KAAKP,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAT;;AAEA,UAAIG,kBAAJ,EAAwB;AACtB,eACE;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAEGI,MAFH,CADF;AAMD,OAPD,MAOO;AACL,eACE;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGA,MADH,CADF;AAKD;AAEF;;;;EAnCgCX,S;;SAsCpBY,W;;;;;;;2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,YAAAA,QADN,GACiB,EADjB;AAAA;AAAA,mBAGQZ,KAAK,CAACa,GAAN,CAAU,+BAAV,EACLC,IADK,CACA,UAAAC,QAAQ;AAAA,qBAAIH,QAAQ,GAAGG,QAAQ,CAACC,IAAxB;AAAA,aADR,EAELC,KAFK,CAEE,UAAAC,GAAG;AAAA,qBAAIC,OAAO,CAACC,GAAR,CAAY,OAAZ,CAAJ;AAAA,aAFL,CAHR;;AAAA;AAAA,6CAOSR,QAPT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAUeS,O;;;;;;;2BAAf,kBAAuBhB,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACuBM,WAAW,EADlC;;AAAA;AACMC,YAAAA,QADN;AAGEO,YAAAA,OAAO,CAACC,GAAR,CAAYR,QAAZ;;AAHF,iBAIMA,QAJN;AAAA;AAAA;AAAA;;AAAA,8CAKY,oBAAC,WAAD;AAAa,cAAA,QAAQ,EAAEA,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALZ;;AAAA;AAAA,8CAQS,IART;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAWA,eAAeV,oBAAf","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport ThoughtData from \"./ThoughtData\";\n\nclass DisplayThoughtButton extends Component {\n  constructor() {\n    super();\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      isThoughtDisplayed: false,\n      loading: true,\n      errMsg: null\n    }\n  }\n\n  handleClick() {\n    this.setState({isThoughtDisplayed: true});\n  }\n\n  render() {\n    const isThoughtDisplayed = this.state.isThoughtDisplayed;\n    let button;\n    button = <button onClick={this.handleClick}>Display Thought</button>\n\n    if (isThoughtDisplayed) {\n      return (\n        <div className=\"thoughtContainer\">\n          <Thought />\n          {button}\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"thoughtContainer\">\n          {button}\n        </div>\n      );\n    }\n\n  }\n}\n\nasync function GetThoughts() {\n  let thoughts = [];\n\n  await axios.get(\"http://localhost:8080/thought\")\n  .then(response => thoughts = response.data)\n  .catch (err => console.log(\"ERROR\"))\n\n  return thoughts;\n}\n\nasync function Thought(state) {\n  let thoughts = await GetThoughts();\n\n  console.log(thoughts);\n  if (thoughts) {\n     return <ThoughtData thoughts={thoughts}/> ;\n  }\n\n  return null;\n }\n\nexport default DisplayThoughtButton;\n"]},"metadata":{},"sourceType":"module"}